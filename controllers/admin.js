const Product = require('../model/product');

exports.getAddProduct =(req,res,next)=>{

    res.render('admin/edit-product',{
        pageTitle: "Add new Product", 
        path: "/admin/add-product",
        editing: false
        // isAuthenticated : req.session.isLoggedIn  
    });
}

//CALLBACK FUNCTION FOR ADD PRODUCT ROUTE
exports.postAddProduct = (req , res, next) => {
    const {title, imageUrl, price, description } = req.body;
    return new Product({title: title, imageUrl: imageUrl, description : description, price : price, userId: req.user._id}).save().then(
        result =>{
            console.log(result);
            res.redirect("/");
        }
    ).catch(e=>console.log(e)); 
}

//CALLBACK FUNCTION FOR EDIT PRODUCT ROUTE
exports.getEditProduct =(req,res,next)=>{
    const editMode = req.query.edit;
    if(!editMode){
        return res.redirect('/');
    }
    const prodId = req.params.productId;
    //HELPER METHOD GENERATED BY SEQUELIZE
    Product.findById(prodId).then(product=>{
        if(!product){
            return  res.redirect('/');
         }
         res.render('admin/edit-product',{ 
             pageTitle: "Edit Product", 
             path: "/admin/edit-product",
             editing: true,
             product : product 
         });
    }).catch(e=>console.log(e));
}

exports.postEditProduct =(req,res,next)=>{ 
    const {productId, title,price,imageUrl, description } = req.body;

    Product.findById(productId).then(
        product =>{
            if(product.userId.toString()!== req.user._id.toString()){
                return res.redirect('/')
            }
            product.title =title;
            product.price = price;
            product.description = description;
            product.imageUrl = imageUrl
            //calling save here on document that already exists does an update in mongoose
            return product.save().then(result => {
                console.log('updated');
                res.redirect("/admin/products")
            }).catch(e=>console.log(e))
        }
    )
    .catch(e=>console.log(e))
}

exports.postDeleteProduct = (req, res, next) =>{
    const prodId = req.body.productId;
    Product.deleteOne({_id :prodId, userId: req.user._id}).then(p=>res.redirect('/admin/products')).catch(e=>console.log(e))
}

exports.getProducts = (req,res,next)=>{
    //select method works like projection
    //.populate('userId','name email') is used to pull data in relational collection referenced
    //the first argument passed to populate is the field that needs to be populated
    //the second argument passed to populate is projection
    Product.find({userId : req.user._id})
    //.select('title price ').populate('userId', 'name')
    .then(products=>{
        console.log(products);
        res.render("admin/products",
            {
            prods: products , 
            pageTitle :'Admin Products', 
            path:'/admin/products' 
        });
    }).catch(e=>console.log(e));
}